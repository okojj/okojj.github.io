<!doctype html public "-//ORA//DTD CD HTML 3.2//EN">
<html>
<head>
<title>[Chapter 3] Functions</TITLE>
<meta name="author" content="Larry Wall, Tom Christiansen, and Randal Schwartz">
<meta name="date" content="Mon Mar 17 13:06:41 1997">
<meta name="form" content="html">
<meta name="metadata" content="dublincore.0.1">
<meta name="objecttype" content="book part">
<meta name="otheragent" content="gmat dbtohtml">
<meta name="publisher" content="O'Reilly &amp; Associates, Inc.">
<meta name="source" content="SGML">
<meta name="subject" content="Perl">
<meta name="title" content="Programming Perl, Second Edition">
<!-- JavaScript: pathcont.js -->

</HEAD>
<body bgcolor="#FFFFFF" text="#000000">

<div class=htmlnav>
<h1><img src="gifs/smbanner.gif" alt="Programming Perl, Second Edition"></H1>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_09.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><b>Chapter 3</b></td>
<td width=172 align=right valign=top><a href="ch03_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
</table>
<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
<hr align=left width=515>
</DIV>
<h1 class=chapter><a class="TITLE" name="PERL2-CH-3">Functions</A></H1>

<div class=htmltoc>

<p>
<b>Contents:</b><br>
Perl Functions by Category<br>
<a href="ch03_02.htm">Perl Functions in Alphabetical Order</A><br>

</DIV>

<p class=para>
This chapter describes each of the Perl functions.  They're presented
one by one in alphabetical order.  (Well, actually, some related
functions are presented in pairs, or even threes or fours.  This is
usually the case when the Perl functions simply make UNIX system calls
or C library calls.  In such cases, the presentation of the Perl
function matches up with the corresponding UNIX manpage organization.)<a name="CH03.FUN"></A>

<p class=para>
Each function description begins with a brief presentation of the
syntax for that function.  Parameters in
<tt class=replaceable><i>ALL_CAPS</i></tt> represent placeholders for actual
expressions, as described in the body of the function description.
Some parameters are optional; the text describes the default values
used when the parameter is not included.

<p class=para>
The functions described in this chapter can serve as terms in an
expression, along with literals and variables.  (Or you can think of
them as prefix operators.  We call them operators half the time
anyway.)  Some of these operators, er, functions take a
<tt class=replaceable><i>LIST</i></tt> as an argument.  Such a list can
consist of any combination of scalar and list values, but any list
values are interpolated as a sequence of scalar values; that is, the
overall argument <tt class=replaceable><i>LIST</i></tt> remains a
single-dimensional list value.  (To interpolate an array as a single
element, you must explicitly create and interpolate a reference to the
array instead.)  Elements of the <tt class=replaceable><i>LIST</i></tt>
should be separated by commas (or by <tt class=literal>=&gt;</tt>, which
is just a funny kind of comma).  Each element of the
<tt class=replaceable><i>LIST</i></tt> is evaluated in a list context.

<p class=para>
The functions described in this chapter may be used either with or without
parentheses around their arguments.  (The syntax descriptions omit the
parentheses.) If you use the parentheses, the simple (but occasionally
surprising) rule is this:  if it looks like a function, it is a
function, and precedence doesn't matter.  Otherwise it's a list
operator or unary operator, and precedence does matter.  And whitespace
between the function and its left 
parenthesis doesn't count--so you 
need to be careful sometimes:

<div class=programlisting>
<p>
<pre>
print 1+2+3;       # Prints 6.
print(1+2) + 3;    # Prints 3.
print (1+2)+3;     # Also prints 3!
print +(1+2)+3;    # Prints 6.
print ((1+2)+3);   # Prints 6.
</PRE>
</DIV>

<p class=para>
If you run Perl with the <b>-w</B> switch it can warn you about this.  For
example, the third line above produces:

<div class=programlisting>
<p>
<pre>
print (...) interpreted as function at - line 3.
Useless use of integer addition in void context at - line 3.
</PRE>
</DIV>

<p class=para>
Some of the <tt class=replaceable><i>LIST</i></tt> operators impose special semantic
significance on the first element or two of the list.  For example, the <a href="ch03_02.htm#PERL2-CMD-CHMOD">chmod</A> function requires that the first element of
the list be the new permission to apply to the files listed in the remaining
elements.  Syntactically, however, the argument to <a href="ch03_02.htm#PERL2-CMD-CHMOD">chmod</A> is really just a <tt class=replaceable><i>LIST</i></tt>, and
you could say:

<div class=programlisting>
<p>
<pre>
unshift @array,0644;
chmod @array;
</PRE>
</DIV>

<p class=para>
which is the same as:

<div class=programlisting>
<p>
<pre>
chmod 0644, @array;
</PRE>
</DIV>

<p class=para>
In these cases, the syntax summary at the top of the section mentions
only the bare
<tt class=replaceable><i>LIST</i></tt>,
and any special initial arguments are documented in the description.

<p class=para>
On the other hand, if the syntax summary lists any arguments before the
<tt class=replaceable><i>LIST</i></tt>, those arguments are syntactically distinguished (not
just semantically distinguished), and may impose syntactic constraints
on the actual arguments you pass to the function when you call it.
For instance, the first argument to the <a href="ch03_02.htm#PERL2-CMD-PUSH">push</A>
function must be an array name.
(You may also put such syntactic constraints on your own subroutine
declarations by the use of prototypes.  See "Prototypes" in <a href="ch02_01.htm">Chapter 2, <i>The Gory Details</i></A>.)

<p class=para>
Many of these operations are based directly on the C library's functions.
If so, we do not attempt to duplicate the UNIX
system documentation for that function, but refer you directly to the manual
page.  Such references look like this:  "See
<i class=emphasis>getlogin</I> (3)."  The number in parentheses tells you which section of
the UNIX manual normally contains the given entry.  If you can't find a
manual page (manpage for short) for a particular C function on your
system, it's likely that the corresponding Perl function is unimplemented.
For example, not all systems implement <i class=emphasis>socket</I> (2) calls.
If you're running in the MS-DOS world, you may have <i class=emphasis>socket</I> calls, but
you won't have <i class=emphasis>fork</I> (2).  (You probably won't
have manpages either, come to think of it.)

<p class=para>
Occasionally you'll find that the documented C function has more arguments than
the corresponding Perl function.  The missing arguments are almost always things
that Perl already knows, such as the length of the previous argument, so you
needn't supply them in Perl.  Any remaining disparities are due to different
ways Perl and C specify their filehandles and their success/failure values.

<p class=para>
For functions that can be used in either scalar or list context,
non-abortive failure is generally indicated in a scalar context by
returning the undefined value, and in a list context by returning the
null list.  Successful execution is generally indicated by returning
a value that will evaluate to true (in context).

<p class=para>
Remember the following rule:  <i class=emphasis>there is no general rule for converting a
list into a scalar!</I>

<p class=para>
Many operators can return a list in list context.
Each such operator knows whether it is being called in scalar or
list context, and in scalar context returns whichever sort of value
it would be most appropriate to return.  Some operators return the
length of the list that would have been returned in list context.  Some
operators return the first value in the list.  Some operators return the
last value in the list.  Some operators return the "other" value, when
something can be looked up either by number or by name.  Some operators
return a count of successful operations.  In general, Perl operators do
exactly what you want, unless you want consistency.

<div class=sect1>
<h2 class=sect1><a class="TITLE" name="PERL2-CH-3-SECT-1">3.1 Perl Functions by Category</A></h2>

<p class=para>
Here are Perl's functions and function-like keywords, arranged by
category.  Some functions appear under more than one heading.

<p>
<dl class=variablelist>
<dt class=varlistentry>Scalar manipulation<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-CHOMP">chomp</A>,
<a href="ch03_02.htm#PERL2-CMD-CHOP">chop</A>,
<a href="ch03_02.htm#PERL2-CMD-CHR">chr</A>,
<a href="ch03_02.htm#PERL2-CMD-CRYPT">crypt</A>,
<a href="ch03_02.htm#PERL2-CMD-HEX">hex</A>,
<a href="ch03_02.htm#PERL2-CMD-INDEX">index</A>,
<a href="ch03_02.htm#PERL2-CMD-LC">lc</A>,
<a href="ch03_02.htm#PERL2-CMD-LCFIRST">lcfirst</A>,
<a href="ch03_02.htm#PERL2-CMD-LENGTH">length</A>,
<a href="ch03_02.htm#PERL2-CMD-OCT">oct</A>,
<a href="ch03_02.htm#PERL2-CMD-ORD">ord</A>,
<a href="ch03_02.htm#PERL2-CMD-PACK">pack</A>,
<a href="ch03_02.htm#PERL2-CMD-QSSTRINGS">q//</A>,
<a href="ch03_02.htm#PERL2-CMD-QSSTRINGS">qq//</A>,
<a href="ch03_02.htm#PERL2-CMD-REVERSE">reverse</A>,
<a href="ch03_02.htm#PERL2-CMD-RINDEX">rindex</A>,
<a href="ch03_02.htm#PERL2-CMD-SPRINTF">sprintf</A>,
<a href="ch03_02.htm#PERL2-CMD-SUBSTR">substr</A>,
<a href="ch03_02.htm#PERL2-CMD-TR">tr///</A>,
<a href="ch03_02.htm#PERL2-CMD-UC">uc</A>,
<a href="ch03_02.htm#PERL2-CMD-UCFIRST">ucfirst</A>,
<a href="ch03_02.htm#PERL2-CMD-YSSS">y///</A>

<p>
<dt class=varlistentry>Regular expressions and pattern matching<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-SPATTERNS">m//</A>,
<a href="ch03_02.htm#PERL2-CMD-POS">pos</A>,
<a href="ch03_02.htm#PERL2-CMD-QUOTEMETA">quotemeta</A>,
<a href="ch03_02.htm#PERL2-CMD-SSSS">s///</A>,
<a href="ch03_02.htm#PERL2-CMD-SPLIT">split</A>,
<a href="ch03_02.htm#PERL2-CMD-STUDY">study</A>

<p>
<dt class=varlistentry>Numeric functions<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-ABS">abs</A>,
<a href="ch03_02.htm#PERL2-CMD-ATAN2">atan2</A>,
<a href="ch03_02.htm#PERL2-CMD-COS">cos</A>,
<a href="ch03_02.htm#PERL2-CMD-EXP">exp</A>,
<a href="ch03_02.htm#PERL2-CMD-HEX">hex</A>,
<a href="ch03_02.htm#PERL2-CMD-INT">int</A>,
<a href="ch03_02.htm#PERL2-CMD-LOG">log</A>,
<a href="ch03_02.htm#PERL2-CMD-OCT">oct</A>,
<a href="ch03_02.htm#PERL2-CMD-RAND">rand</A>,
<a href="ch03_02.htm#PERL2-CMD-SIN">sin</A>,
<a href="ch03_02.htm#PERL2-CMD-SQRT">sqrt</A>,
<a href="ch03_02.htm#PERL2-CMD-SRAND">srand</A>

<p>
<dt class=varlistentry>Array processing<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-POP">pop</A>,
<a href="ch03_02.htm#PERL2-CMD-PUSH">push</A>,
<a href="ch03_02.htm#PERL2-CMD-SHIFT">shift</A>,
<a href="ch03_02.htm#PERL2-CMD-SPLICE">splice</A>,
<a href="ch03_02.htm#PERL2-CMD-UNSHIFT">unshift</A>

<p>
<dt class=varlistentry>List processing<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-GREP">grep</A>,
<a href="ch03_02.htm#PERL2-CMD-JOIN">join</A>,
<a href="ch03_02.htm#PERL2-CMD-MAP">map</A>,
<a href="ch03_02.htm#PERL2-CMD-QSSTRINGS">qw//</A>,
<a href="ch03_02.htm#PERL2-CMD-REVERSE">reverse</A>,
<a href="ch03_02.htm#PERL2-CMD-SORT">sort</A>,
<a href="ch03_02.htm#PERL2-CMD-UNPACK">unpack</A>

<p>
<dt class=varlistentry>Hash processing<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-DELETE">delete</A>,
<a href="ch03_02.htm#PERL2-CMD-EACH">each</A>,
<a href="ch03_02.htm#PERL2-CMD-EXISTS">exists</A>,
<a href="ch03_02.htm#PERL2-CMD-KEYS">keys</A>,
<a href="ch03_02.htm#PERL2-CMD-VALUES">values</A>

<p>
<dt class=varlistentry>Input and output<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-BINMODE">binmode</A>,
<a href="ch03_02.htm#PERL2-CMD-CLOSE">close</A>,
<a href="ch03_02.htm#PERL2-CMD-CLOSEDIR">closedir</A>,
<a href="ch03_02.htm#PERL2-CMD-DBMCLOSE">dbmclose</A>,
<a href="ch03_02.htm#PERL2-CMD-DBMOPEN">dbmopen</A>,
<a href="ch03_02.htm#PERL2-CMD-DIE">die</A>,
<a href="ch03_02.htm#PERL2-CMD-EOF">eof</A>,
<a href="ch03_02.htm#PERL2-CMD-FILENO">fileno</A>,
<a href="ch03_02.htm#PERL2-CMD-FLOCK">flock</A>,
<a href="ch03_02.htm#PERL2-CMD-FORMAT">format</A>,
<a href="ch03_02.htm#PERL2-CMD-GETC">getc</A>,
<a href="ch03_02.htm#PERL2-CMD-PRINT">print</A>,
<a href="ch03_02.htm#PERL2-CMD-PRINTF">printf</A>,
<a href="ch03_02.htm#PERL2-CMD-READ">read</A>,
<a href="ch03_02.htm#PERL2-CMD-READDIR">readdir</A>,
<a href="ch03_02.htm#PERL2-CMD-REWINDDIR">rewinddir</A>,
<a href="ch03_02.htm#PERL2-CMD-SEEK">seek</A>,
<a href="ch03_02.htm#PERL2-CMD-SEEKDIR">seekdir</A>,
<a href="ch03_02.htm#PERL2-CMD-SELECT">select (ready file descriptors)</A>,
<a href="ch03_02.htm#PERL2-CMD-SYSCALL">syscall</A>,
<a href="ch03_02.htm#PERL2-CMD-SYSREAD">sysread</A>,
<a href="ch03_02.htm#PERL2-CMD-SYSWRITE">syswrite</A>,
<a href="ch03_02.htm#PERL2-CMD-TELL">tell</A>,
<a href="ch03_02.htm#PERL2-CMD-TELLDIR">telldir</A>,
<a href="ch03_02.htm#PERL2-CMD-TRUNCATE">truncate</A>,
<a href="ch03_02.htm#PERL2-CMD-WARN">warn</A>,
<a href="ch03_02.htm#PERL2-CMD-WRITE">write</A>

<p>
<dt class=varlistentry>Fixed-length data and records<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-PACK">pack</A>,
<a href="ch03_02.htm#PERL2-CMD-READ">read</A>,
<a href="ch03_02.htm#PERL2-CMD-SYSCALL">syscall</A>,
<a href="ch03_02.htm#PERL2-CMD-SYSREAD">sysread</A>,
<a href="ch03_02.htm#PERL2-CMD-SYSWRITE">syswrite</A>,
<a href="ch03_02.htm#PERL2-CMD-UNPACK">unpack</A>,
<a href="ch03_02.htm#PERL2-CMD-VEC">vec</A>

<p>
<dt class=varlistentry>Filehandles,
files,
and directories<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-CHDIR">chdir</A>,
<a href="ch03_02.htm#PERL2-CMD-CHMOD">chmod</A>,
<a href="ch03_02.htm#PERL2-CMD-CHOWN">chown</A>,
<a href="ch03_02.htm#PERL2-CMD-CHROOT">chroot</A>,
<a href="ch03_02.htm#PERL2-CMD-FCNTL">fcntl</A>,
<a href="ch03_02.htm#PERL2-CMD-GLOB">glob</A>,
<a href="ch03_02.htm#PERL2-CMD-IOCTL">ioctl</A>,
<a href="ch03_02.htm#PERL2-CMD-LINK">link</A>,
<a href="ch03_02.htm#PERL2-CMD-LSTAT">lstat</A>,
<a href="ch03_02.htm#PERL2-CMD-MKDIR">mkdir</A>,
<a href="ch03_02.htm#PERL2-CMD-OPEN">open</A>,
<a href="ch03_02.htm#PERL2-CMD-OPENDIR">opendir</A>,
<a href="ch03_02.htm#PERL2-CMD-READLINK">readlink</A>,
<a href="ch03_02.htm#PERL2-CMD-RENAME">rename</A>,
<a href="ch03_02.htm#PERL2-CMD-RMDIR">rmdir</A>,
<a href="ch03_02.htm#PERL2-CMD-STAT">stat</A>,
<a href="ch03_02.htm#PERL2-CMD-SYMLINK">symlink</A>,
<a href="ch03_02.htm#PERL2-CMD-SYSOPEN">sysopen</A>,
<a href="ch03_02.htm#PERL2-CMD-UMASK">umask</A>,
<a href="ch03_02.htm#PERL2-CMD-UNLINK">unlink</A>,
<a href="ch03_02.htm#PERL2-CMD-UTIME">utime</A>

<p>
<dt class=varlistentry>Flow of program control<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-CALLER">caller</A>,
<a href="ch03_02.htm#PERL2-CMD-DIE">die</A>,
<a href="ch03_02.htm#PERL2-CMD-DO">do</A>,
<a href="ch03_02.htm#PERL2-CMD-DUMP">dump</A>,
<a href="ch03_02.htm#PERL2-CMD-EVAL">eval</A>,
<a href="ch03_02.htm#PERL2-CMD-EXIT">exit</A>,
<a href="ch03_02.htm#PERL2-CMD-GOTO">goto</A>,
<a href="ch03_02.htm#PERL2-CMD-LAST">last</A>,
<a href="ch03_02.htm#PERL2-CMD-NEXT">next</A>,
<a href="ch03_02.htm#PERL2-CMD-REDO">redo</A>,
<a href="ch03_02.htm#PERL2-CMD-RETURN">return</A>,
<a href="ch03_02.htm#PERL2-CMD-SUB">sub</A>,
<a href="ch03_02.htm#PERL2-CMD-WANTARRAY">wantarray</A>

<p>
<dt class=varlistentry>Scoping <dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-CALLER">caller</A>,
<a href="ch03_02.htm#PERL2-CMD-IMPORT">import</A>,
<a href="ch03_02.htm#PERL2-CMD-LOCAL">local</A>,
<a href="ch03_02.htm#PERL2-CMD-MY">my</A>,
<a href="ch03_02.htm#PERL2-CMD-PACKAGE">package</A>,
<a href="ch03_02.htm#PERL2-CMD-USE">use</A>

<p>
<dt class=varlistentry>Miscellaneous<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-DEFINED">defined</A>,
<a href="ch03_02.htm#PERL2-CMD-DUMP">dump</A>,
<a href="ch03_02.htm#PERL2-CMD-EVAL">eval</A>,
<a href="ch03_02.htm#PERL2-CMD-FORMLINE">formline</A>,
<a href="ch03_02.htm#PERL2-CMD-LOCAL">local</A>,
<a href="ch03_02.htm#PERL2-CMD-MY">my</A>,
<a href="ch03_02.htm#PERL2-CMD-RESET">reset</A>,
<a href="ch03_02.htm#PERL2-CMD-SCALAR">scalar</A>,
<a href="ch03_02.htm#PERL2-CMD-UNDEF">undef</A>,
<a href="ch03_02.htm#PERL2-CMD-WANTARRAY">wantarray</A>

<p>
<dt class=varlistentry>Processes and process groups<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-ALARM">alarm</A>,
<a href="ch03_02.htm#PERL2-CMD-EXEC">exec</A>,
<a href="ch03_02.htm#PERL2-CMD-FORK">fork</A>,
<a href="ch03_02.htm#PERL2-CMD-GETPGRP">getpgrp</A>,
<a href="ch03_02.htm#PERL2-CMD-GETPPID">getppid</A>,
<a href="ch03_02.htm#PERL2-CMD-GETPRIORITY">getpriority</A>,
<a href="ch03_02.htm#PERL2-CMD-KILL">kill</A>,
<a href="ch03_02.htm#PERL2-CMD-PIPE">pipe</A>,
<a href="ch03_02.htm#PERL2-CMD-QSSTRINGS">qx//</A>,
<a href="ch03_02.htm#PERL2-CMD-SETPGRP">setpgrp</A>,
<a href="ch03_02.htm#PERL2-CMD-SETPRIORITY">setpriority</A>,
<a href="ch03_02.htm#PERL2-CMD-SLEEP">sleep</A>,
<a href="ch03_02.htm#PERL2-CMD-SYSTEM">system</A>,
<a href="ch03_02.htm#PERL2-CMD-TIMES">times</A>,
<a href="ch03_02.htm#PERL2-CMD-WAIT">wait</A>,
<a href="ch03_02.htm#PERL2-CMD-WAITPID">waitpid</A>

<p>
<dt class=varlistentry>Library modules<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-DO">do</A>,
<a href="ch03_02.htm#PERL2-CMD-IMPORT">import</A>,
<a href="ch03_02.htm#PERL2-CMD-NO">no</A>,
<a href="ch03_02.htm#PERL2-CMD-PACKAGE">package</A>,
<a href="ch03_02.htm#PERL2-CMD-REQUIRE">require</A>,
<a href="ch03_02.htm#PERL2-CMD-USE">use</A>

<p>
<dt class=varlistentry>Classes and objects<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-BLESS">bless</A>,
<a href="ch03_02.htm#PERL2-CMD-DBMCLOSE">dbmclose</A>,
<a href="ch03_02.htm#PERL2-CMD-DBMOPEN">dbmopen</A>,
<a href="ch03_02.htm#PERL2-CMD-PACKAGE">package</A>,
<a href="ch03_02.htm#PERL2-CMD-REF">ref</A>,
<a href="ch03_02.htm#PERL2-CMD-TIE">tie</A>,
<a href="ch03_02.htm#PERL2-CMD-TIED">tied</A>,
<a href="ch03_02.htm#PERL2-CMD-UNTIE">untie</A>,
<a href="ch03_02.htm#PERL2-CMD-USE">use</A>

<p>
<dt class=varlistentry>Low-level socket access<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-ACCEPT">accept</A>,
<a href="ch03_02.htm#PERL2-CMD-BIND">bind</A>,
<a href="ch03_02.htm#PERL2-CMD-CONNECT">connect</A>,
<a href="ch03_02.htm#PERL2-CMD-GETPEERNAME">getpeername</A>,
<a href="ch03_02.htm#PERL2-CMD-GETSOCKNAME">getsockname</A>,
<a href="ch03_02.htm#PERL2-CMD-GETSOCKOPT">getsockopt</A>,
<a href="ch03_02.htm#PERL2-CMD-LISTEN">listen</A>,
<a href="ch03_02.htm#PERL2-CMD-RECV">recv</A>,
<a href="ch03_02.htm#PERL2-CMD-SEND">send</A>,
<a href="ch03_02.htm#PERL2-CMD-SETSOCKOPT">setsockopt</A>,
<a href="ch03_02.htm#PERL2-CMD-SHUTDOWN">shutdown</A>,
<a href="ch03_02.htm#PERL2-CMD-SOCKET">socket</A>,
<a href="ch03_02.htm#PERL2-CMD-SOCKETPAIR">socketpair</A>

<p>
<dt class=varlistentry>System V interprocess communication<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-MSGCTL">msgctl</A>,
<a href="ch03_02.htm#PERL2-CMD-MSGGET">msgget</A>,
<a href="ch03_02.htm#PERL2-CMD-MSGRCV">msgrcv</A>,
<a href="ch03_02.htm#PERL2-CMD-MSGSND">msgsnd</A>,
<a href="ch03_02.htm#PERL2-CMD-SEMCTL">semctl</A>,
<a href="ch03_02.htm#PERL2-CMD-SEMGET">semget</A>,
<a href="ch03_02.htm#PERL2-CMD-SEMOP">semop</A>,
<a href="ch03_02.htm#PERL2-CMD-SHMCTL">shmctl</A>,
<a href="ch03_02.htm#PERL2-CMD-SHMGET">shmget</A>,
<a href="ch03_02.htm#PERL2-CMD-SHMREAD">shmread</A>,
<a href="ch03_02.htm#PERL2-CMD-SHMWRITE">shmwrite</A>

<p>
<dt class=varlistentry>Fetching user and group information<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-GETGRENT">endgrent</A>,
<a href="ch03_02.htm#PERL2-CMD-GETHOSTENT">endhostent</A>,
<a href="ch03_02.htm#PERL2-CMD-GETNETENT">endnetent</A>,
<a href="ch03_02.htm#PERL2-CMD-GETPWENT">endpwent</A>,
<a href="ch03_02.htm#PERL2-CMD-GETGRENT">getgrent</A>,
<a href="ch03_02.htm#PERL2-CMD-GETGRGID">getgrgid</A>,
<a href="ch03_02.htm#PERL2-CMD-GETGRNAM">getgrnam</A>,
<a href="ch03_02.htm#PERL2-CMD-GETLOGIN">getlogin</A>,
<a href="ch03_02.htm#PERL2-CMD-GETPWENT">getpwent</A>,
<a href="ch03_02.htm#PERL2-CMD-GETPWNAM">getpwnam</A>,
<a href="ch03_02.htm#PERL2-CMD-GETPWUID">getpwuid</A>,
<a href="ch03_02.htm#PERL2-CMD-GETGRENT">setgrent</A>,
<a href="ch03_02.htm#PERL2-CMD-GETPWENT">setpwent</A>&gt;

<p>
<dt class=varlistentry>Fetching network information<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-GETPROTOENT">endprotoent</A>,
<a href="ch03_02.htm#PERL2-CMD-GETSERVENT">endservent</A>,
<a href="ch03_02.htm#PERL2-CMD-GETHOSTBYADDR">gethostbyaddr</A>,
<a href="ch03_02.htm#PERL2-CMD-GETHOSTBYNAME">gethostbyname</A>,
<a href="ch03_02.htm#PERL2-CMD-GETHOSTENT">gethostent</A>,
<a href="ch03_02.htm#PERL2-CMD-GETNETBYADDR">getnetbyaddr</A>,
<a href="ch03_02.htm#PERL2-CMD-GETNETBYNAME">getnetbyname</A>,
<a href="ch03_02.htm#PERL2-CMD-GETNETENT">getnetent</A>,
<a href="ch03_02.htm#PERL2-CMD-GETPROTOBYNAME">getprotobyname</A>,
<a href="ch03_02.htm#PERL2-CMD-GETPROTOBYNUMBER">getprotobynumber</A>,
<a href="ch03_02.htm#PERL2-CMD-GETPROTOENT">getprotoent</A>,
<a href="ch03_02.htm#PERL2-CMD-GETSERVBYNAME">getservbyname</A>,
<a href="ch03_02.htm#PERL2-CMD-GETSERVBYPORT">getservbyport</A>,
<a href="ch03_02.htm#PERL2-CMD-GETSERVENT">getservent</A>,
<a href="ch03_02.htm#PERL2-CMD-GETHOSTENT">sethostent</A>,
<a href="ch03_02.htm#PERL2-CMD-GETNETENT">setnetent</A>,
<a href="ch03_02.htm#PERL2-CMD-GETPROTOENT">setprotoent</A>,
<a href="ch03_02.htm#PERL2-CMD-GETSERVENT">setservent</A>&gt;

<p>
<dt class=varlistentry>Time<dd>

<p class=para>
<a href="ch03_02.htm#PERL2-CMD-GMTIME">gmtime</A>,
<a href="ch03_02.htm#PERL2-CMD-LOCALTIME">localtime</A>,
<a href="ch03_02.htm#PERL2-CMD-TIME">time</A>,
<a href="ch03_02.htm#PERL2-CMD-TIMES">times</A></DL>
</DIV>


<div class=htmlnav>
<p>
<hr align=left width=515>
<table width=515 border=0 cellpadding=0 cellspacing=0>
<tr>
<td width=172 align=left valign=top><a href="ch02_09.htm"><img src="gifs/txtpreva.gif" alt="Previous" border=0></A></td>
<td width=171 align=center valign=top><a href="index.htm"><img src="gifs/txthome.gif" alt="Home" border=0></a></td>
<td width=172 align=right valign=top><a href="ch03_02.htm"><img src="gifs/txtnexta.gif" alt="Next" border=0></A></td>
</tr>
<tr>
<td width=172 align=left valign=top>Regular Expression Special Variables</td>
<td width=171 align=center valign=top><a href="index/idx_0.htm">Book Index</a></td>
<td width=172 align=right valign=top>Perl Functions in Alphabetical Order</td>
</tr>
</table>

<!-- JavaScript: prev.js -->
&nbsp;
<!-- JavaScript: next.js -->
</DIV>
</BODY>
</HTML>
